// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_estimate_model_ml_Hway
List rcpp_estimate_model_ml_Hway(IntegerMatrix RNETWORK, IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, IntegerVector rhighest_order, IntegerVector random_seeds, NumericVector g);
RcppExport SEXP _mlnetseparable_rcpp_estimate_model_ml_Hway(SEXP RNETWORKSEXP, SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rhighest_orderSEXP, SEXP random_seedsSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type RNETWORK(RNETWORKSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rhighest_order(rhighest_orderSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type random_seeds(random_seedsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_estimate_model_ml_Hway(RNETWORK, rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rhighest_order, random_seeds, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_estimate_model_ml
List rcpp_estimate_model_ml(IntegerMatrix RNETWORK, NumericVector rNR_tol, IntegerVector rNR_max, IntegerVector rMCMLE_max, IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, LogicalVector rcheck_chull, IntegerVector random_seeds, NumericVector g);
RcppExport SEXP _mlnetseparable_rcpp_estimate_model_ml(SEXP RNETWORKSEXP, SEXP rNR_tolSEXP, SEXP rNR_maxSEXP, SEXP rMCMLE_maxSEXP, SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rcheck_chullSEXP, SEXP random_seedsSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type RNETWORK(RNETWORKSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rNR_tol(rNR_tolSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rNR_max(rNR_maxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rMCMLE_max(rMCMLE_maxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rcheck_chull(rcheck_chullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type random_seeds(random_seedsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_estimate_model_ml(RNETWORK, rNR_tol, rNR_max, rMCMLE_max, rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rcheck_chull, random_seeds, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_estimate_model
List rcpp_estimate_model(IntegerMatrix RNETWORK, NumericVector rNR_tol, IntegerVector rNR_max, IntegerVector rMCMLE_max, IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, List bmemb, IntegerVector rnum_blocks, LogicalVector rcheck_chull);
RcppExport SEXP _mlnetseparable_rcpp_estimate_model(SEXP RNETWORKSEXP, SEXP rNR_tolSEXP, SEXP rNR_maxSEXP, SEXP rMCMLE_maxSEXP, SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP bmembSEXP, SEXP rnum_blocksSEXP, SEXP rcheck_chullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type RNETWORK(RNETWORKSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rNR_tol(rNR_tolSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rNR_max(rNR_maxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rMCMLE_max(rMCMLE_maxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< List >::type bmemb(bmembSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_blocks(rnum_blocksSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rcheck_chull(rcheck_chullSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_estimate_model(RNETWORK, rNR_tol, rNR_max, rMCMLE_max, rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, bmemb, rnum_blocks, rcheck_chull));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate
List rcpp_simulate(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, List bmemb, IntegerVector rnum_blocks, NumericVector rtheta);
RcppExport SEXP _mlnetseparable_rcpp_simulate(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP bmembSEXP, SEXP rnum_blocksSEXP, SEXP rthetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< List >::type bmemb(bmembSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_blocks(rnum_blocksSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, bmemb, rnum_blocks, rtheta));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml
List rcpp_simulate_ml(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed, NumericVector g);
RcppExport SEXP _mlnetseparable_rcpp_simulate_ml(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml_Hway
List rcpp_simulate_ml_Hway(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, IntegerVector highest_order, NumericVector rtheta, int rand_seed, NumericVector g);
RcppExport SEXP _mlnetseparable_rcpp_simulate_ml_Hway(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP highest_orderSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type highest_order(highest_orderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml_Hway(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, highest_order, rtheta, rand_seed, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml_Hway_suffstats
List rcpp_simulate_ml_Hway_suffstats(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, IntegerVector highest_order, NumericVector rtheta, int rand_seed, NumericVector g);
RcppExport SEXP _mlnetseparable_rcpp_simulate_ml_Hway_suffstats(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP highest_orderSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type highest_order(highest_orderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml_Hway_suffstats(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, highest_order, rtheta, rand_seed, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml_suffstats
List rcpp_simulate_ml_suffstats(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed, NumericVector g);
RcppExport SEXP _mlnetseparable_rcpp_simulate_ml_suffstats(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml_suffstats(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_exact_simulate_ml
List rcpp_exact_simulate_ml(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed);
RcppExport SEXP _mlnetseparable_rcpp_exact_simulate_ml(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_exact_simulate_ml(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _mlnetseparable_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _mlnetseparable_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _mlnetseparable_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _mlnetseparable_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlnetseparable_rcpp_estimate_model_ml_Hway", (DL_FUNC) &_mlnetseparable_rcpp_estimate_model_ml_Hway, 11},
    {"_mlnetseparable_rcpp_estimate_model_ml", (DL_FUNC) &_mlnetseparable_rcpp_estimate_model_ml, 14},
    {"_mlnetseparable_rcpp_estimate_model", (DL_FUNC) &_mlnetseparable_rcpp_estimate_model, 13},
    {"_mlnetseparable_rcpp_simulate", (DL_FUNC) &_mlnetseparable_rcpp_simulate, 9},
    {"_mlnetseparable_rcpp_simulate_ml", (DL_FUNC) &_mlnetseparable_rcpp_simulate_ml, 10},
    {"_mlnetseparable_rcpp_simulate_ml_Hway", (DL_FUNC) &_mlnetseparable_rcpp_simulate_ml_Hway, 11},
    {"_mlnetseparable_rcpp_simulate_ml_Hway_suffstats", (DL_FUNC) &_mlnetseparable_rcpp_simulate_ml_Hway_suffstats, 11},
    {"_mlnetseparable_rcpp_simulate_ml_suffstats", (DL_FUNC) &_mlnetseparable_rcpp_simulate_ml_suffstats, 10},
    {"_mlnetseparable_rcpp_exact_simulate_ml", (DL_FUNC) &_mlnetseparable_rcpp_exact_simulate_ml, 9},
    {"_mlnetseparable_rcpparma_hello_world", (DL_FUNC) &_mlnetseparable_rcpparma_hello_world, 0},
    {"_mlnetseparable_rcpparma_outerproduct", (DL_FUNC) &_mlnetseparable_rcpparma_outerproduct, 1},
    {"_mlnetseparable_rcpparma_innerproduct", (DL_FUNC) &_mlnetseparable_rcpparma_innerproduct, 1},
    {"_mlnetseparable_rcpparma_bothproducts", (DL_FUNC) &_mlnetseparable_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlnetseparable(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
